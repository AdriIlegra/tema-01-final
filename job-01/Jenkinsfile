pipeline {
    agent any

    environment {
        CI = 'true'
        ARTIFACTORY_SERVER_ID = 'Calculadora' // Nome do servidor de Artifactory configurado no Jenkins
    }

    stages {
        stage('Connect to Git Repository') {
            steps {
                script {
                    checkout scm
                }
            }
        }

        stage('Gradle clean') {
            steps {
                sh './gradlew clean'
            }
        }

        stage('Gradle test') {
            steps {
                sh './gradlew test'
            }
        }

        stage('Gradle build') {
            steps {
                sh './gradlew build'
            }
        }

        stage('Upload Artifact to JFrog') {
            steps {
                script {
                    def server = Artifactory.server ARTIFACTORY_SERVER_ID
                    def uploadSpec = """{
                        "files": [
                            {
                                "pattern": "build/libs/tema-04.jar",
                                "target": "Calculadora/"
                            }
                        ]
                    }"""
                    server.upload(uploadSpec)
                }
            }
        }

        stage('Download Artifact from JFrog') {
            steps {
                script {
                    def server = Artifactory.server ARTIFACTORY_SERVER_ID
                    def downloadSpec = """{
                        "files": [
                            {
                                "pattern": "Calculadora/tema-04.jar",
                                "target": "build/libs/"
                            }
                        ]
                    }"""
                    server.download(downloadSpec)
                }
            }
        }
    }

    post {
        success {
            script {
                def server = Artifactory.server ARTIFACTORY_SERVER_ID
                def promotionConfig = [
                    'buildName': env.JOB_NAME,
                    'buildNumber': env.BUILD_NUMBER,
                    'targetRepo': 'libs-release-local',
                    'sourceRepo': 'libs-snapshot-local'
                ]
                server.promote(promotionConfig)
            }
        }
        failure {
            // Fa√ßa algo quando o pipeline falhar
        }
    }
}
